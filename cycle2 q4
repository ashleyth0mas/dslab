#include <stdio.h>
#define maxterms 100
typedef struct
{
    int row;
    int col;
    int value;
}sparse;

sparse sp1[maxterms];
sparse sp2[maxterms];
int size1, size2;
 sparse sparseSum[maxterms];
int sumsize;
const int ROWS, COLS;
int matrix1[100][100], matrix2[100][100];


void printSparseMatrix( sparse sp[100], int size)
{
    int i;
    printf("\n");
    printf("ROW  COLUMN  VALUE");
    for (i = 0; i < size; i++)
    {
        printf("\n");
        printf("%d\t%d\t%d", sp[i].row, sp[i].col, sp[i].value);
    }
}

void convertToSparseMatrix()
{
    sp1[0].row = sp2[0].row = ROWS;
    sp1[0].col = sp2[0].col = COLS;
    int i, j, k1 = 1, k2 = 1;
    for (i = 0; i < ROWS; i++)
    {
        for (j = 0; j < COLS; j++)
        {
            if (matrix1[i][j]!=0)
            {
                sp1[k1].row = i ;
                sp1[k1].col = j ;
                sp1[k1].value = matrix1[i][j];
                k1++;
            }
            if (matrix2[i][j]!=0)
            {
                sp2[k2].row = i ;
                sp2[k2].col = j ;
                sp2[k2].value = matrix2[i][j];
                k2++;
            }
        }
    }
    size1= k1;
    sp1[0].value = k1-1 ;
    size2 = k2;
    sp2[0].value = k2-1 ;
}

void CalculateSum()
{
    sparseSum[0].row = sp1[0].row;
    sparseSum[0].col = sp1[0].col;
    int i = 1, j = 1, k = 1;
    while (i < size1 && j < size2)
    {
        if (sp1[i].row == sp2[j].row && sp1[i].col == sp2[j].col) 
        {
            sparseSum[k].row = sp1[i].row;
            sparseSum[k].col = sp1[i].col;
            sparseSum[k].value = sp1[i].value + sp2[j].value;
            i++;
            j++;
        }
        else if (sp1[i].row == sp2[j].row) 
        {
            sparseSum[k].row = sp1[i].row;
            if (sp1[i].col < sp2[j].col && i < size1)
            {
                sparseSum[k].col = sp1[i].col;
                sparseSum[k].value = sp1[i].value;
                i++;
            }
            else 
            {
                sparseSum[k].col = sp2[j].col;
                sparseSum[k].value = sp2[j].value;
                j++;
            }
        }
        else 
        {
            if (sp1[i].row < sp2[j].row) 
            {
                sparseSum[k].row = sp1[i].row;
                sparseSum[k].col = sp1[i].col;
                sparseSum[k].value = sp1[i].value;
                i++;
            }
            else 
            {
                sparseSum[k].row = sp2[j].row;
                sparseSum[k].col = sp2[j].col;
                sparseSum[k].value = sp2[j].value;
                j++;
            }
        }
        k++;
    }
    while (i < size1) 
    {
        sparseSum[k].row = sp1[i].row;
        sparseSum[k].col = sp1[i].col;
        sparseSum[k].value = sp1[i].value;
        k++;
        i++;
    }
    while (j < size2) 
    {
        sparseSum[k].row = sp2[j].row;
        sparseSum[k].col = sp2[j].col;
        sparseSum[k].value = sp2[j].value;
        k++;
        j++;
    }
    sumsize = k;
    sparseSum[0].value = k - 1;
}


int main()
{
    int i, j, row2, col2;
    printf("\nEnter Dimensions of matrix 1\n");
    scanf("%d\n%d", &ROWS, &COLS);
    printf("\nEnter Elements of matrix 1\n");
    for (i = 0; i < ROWS; i++)
        for (j = 0; j < COLS; j++)
            scanf("%d", &matrix1[i][j]);
    printf("\nEnter Dimensions of matrix 2\n");
    scanf("%d%d", &row2, &col2);
    if (row2 != ROWS || col2 != COLS)
    {
        printf("\nInvalid dimensions for addition\n");
        return 0;
    }
    printf("\nEnter Elements of matrix 2\n");
    for (i = 0; i < ROWS; i++)
        for (j = 0; j < COLS; j++)
            scanf("%d", &matrix2[i][j]);
    convertToSparseMatrix();
    printf("\nSparse Matrix 1 ");
    printSparseMatrix(sp1, size1);
    printf("\n\nSparse Matrix 2 ");
    printSparseMatrix(sp2, size2);
    CalculateSum();
    printf("\n\nSum of Sparse Matrices");
    printSparseMatrix(sparseSum, sumsize);
      return 0;
}
